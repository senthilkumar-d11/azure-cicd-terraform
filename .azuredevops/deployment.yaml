name: $(Build.SourceBranchName) - $(Build.RequestedFor) - $(date:yyyyMMdd)$(rev:.r)

trigger: none

parameters: 
  - name: environment
    type: string
    default: dev
    values:
      - dev
      - prd

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: azureServiceConnection
    value: 'CITI-IAC-TF'
  - name: workingDirectory
    value: '$(Build.SourcesDirectory)/source'

################################################################################
# 1. PLAN STAGE
################################################################################
stages:
- stage: Plan
  displayName: 'Plan Infrastructure'
  jobs:
  - job: Terraform_Plan
    displayName: 'Terraform Plan'
    steps:
      # By default, the pipeline checks out the repo here
      - checkout: self

      # Publish the entire repo as an artifact named "tf-files"
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform Files'
        inputs:
          targetPath: '$(Build.SourcesDirectory)'
          artifact: 'tf-files'
      
      - task: DownloadPipelineArtifact@2
        displayName: 'Download repo-contents artifact'
        inputs:
          buildType: 'current'
          artifact: 'tf-files'
          path: '$(workingDirectory)'      

      # By default, the pipeline checks out the repo here
      - template: templates/terraform-init.yml
        parameters:
          azureServiceConnection: $(azureServiceConnection)
          workingDirectory: '$(workingDirectory)'
          TF_STATE_ACCESS_KEY: $(TF_STATE_ACCESS_KEY)

      - template: templates/terraform-plan-apply.yml
        parameters:
          azureServiceConnection: $(azureServiceConnection)
          workingDirectory: '$(workingDirectory)'
          tfvarsFile: ${{ parameters.environment }}.tfvars
      
################################################################################
# 2. DEPLOY STAGE
################################################################################
- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Plan
  condition: succeeded()
  jobs:
  - deployment: Terraform_Deploy
    displayName: 'Terraform Deploy'
    environment: 'DeployInfra'  # Environment with manual approval checks
    # Disable default checkout so we rely on the artifact instead
    strategy:
      runOnce:
        deploy:
          steps:
            # Disable default checkout
            - checkout: none 

            # Download the tf-files artifact published in the Plan stage
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Terraform Files'
              inputs:
                artifact: 'tf-files'
                path: '$(workingDirectory)'

            - template: templates/terraform-init.yml
              parameters:
                azureServiceConnection: $(azureServiceConnection)
                workingDirectory: $(workingDirectory)
                TF_STATE_ACCESS_KEY: $(TF_STATE_ACCESS_KEY)

            # If you want to re-plan in Deploy, do it here:
            - template: templates/terraform-plan-apply.yml
              parameters:
                azureServiceConnection: $(azureServiceConnection)
                workingDirectory: $(workingDirectory)
                tfvarsFile: ${{ parameters.environment }}.tfvars

            - template: templates/terraform-apply.yml
              parameters:
                azureServiceConnection: $(azureServiceConnection)
                workingDirectory: $(workingDirectory)

